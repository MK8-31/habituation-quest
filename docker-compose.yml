# zenn-backend/docker-compose.yml
version: "3.8"

services:
  db:
    container_name: db
    image: mysql:8.0.28
    environment:
      TZ: Asia/Tokyo
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    command: --default-authentication-plugin=mysql_native_password # 認証方式を8系以前のものにする。
    env_file:
      - ./db.env
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - 3307:3306
    networks:
      app_net:
        ipv4_address: '172.20.0.2'
  backend:
    container_name: backend
    build: ./backend/
    image: backend
    # command: bundle exec rails server -b 0.0.0.0
    tty: true
    stdin_open: true
    env_file:
      - ./db.env
    volumes:
      - ./backend:/app:cached
      - bundle_data:/usr/local/bundle:cached # 名前付きVolume
      - log-data:/var/log
      - /app/vendor # 匿名Volume
      - /app/tmp
      - /app/log
      - /app/.git
    environment:
      TZ: Asia/Tokyo
    depends_on:
      - db
    ports:
    # ポートフォワード #「ポートフォワーディング」とは、インターネットから特定のポート番号宛てに届いたパケットを、あらかじめ設定しておいたLAN側の機器に転送する機能です。
      # - 3030:3000
      - 3030:80
      # 左側（3030）がホストのポートで、右側（3000）がコンテナのポート
    networks:
      app_net:
        ipv4_address: '172.20.0.3' # dockerのコンテナに固定IPを振る
  frontend:
    container_name: front
    build: ./frontend/
    image: frontend
    volumes:
      - ./frontend:/app
    ports:
      # 開発環境
      - 3000:3000
      # 本番環境
      # - 3000:80
    # 開発環境
    command: "npm run serve"
    networks:
      app_net:
        ipv4_address: '172.20.0.4'
  # e2e:
  #   container_name: e2e
  #   image: "cypress/included:4.1.0"
  #   # container_name: cypress
  #   # "cypress/included" images have entrypoint set to globally installed cypress
  #   # so the command can simply add any arguments
  #   # command: "run --browser chrome"
  #   working_dir: /e2e
  #   volumes:
  #     - ./e2e:/e2e
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #     - "localhost:host-gateway"
  #   # environment:
  #   #   - CYPRESS_baseUrl=http://172.20.0.4:3000
  #   networks:
  #     app_net:
  #       ipv4_address: '172.20.0.5'
  #   depends_on:
  #     - frontend

networks:
  app_net:
    driver: bridge #bridge はホストの任意のポートをコンテナのポートにマップすることが出来る
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24 # サブネットは、ネットワーク内のネットワーク

volumes:
  mysql_data:
  bundle_data:
  log-data:

# 10101100 00010100 00000000   0000 0000
# 172.20.0 がネットワーク部

# docker-compose run backend rails new . --api --force --database=mysql --skip-bundle
